import type applicationinsights_default_export from 'applicationinsights';
import type { TelemetryClient, Contracts } from 'applicationinsights';
export declare type strictAiSeverityLevel = 0 | 1 | 2 | 3 | 4;
export declare type pinoSeverityLevel = 10 | 20 | 30 | 40 | 50 | 60;
/**
 * Generated by pino inside of next-logger, I think
 */
export declare type LogItem = {
    level: pinoSeverityLevel;
    time: number;
    pid: number;
    hostname: string;
    name: string;
    msg: string;
    message?: string;
    err?: {
        type: string;
        message: string;
        stack?: string;
        code?: string;
        errno?: number;
        syscall?: string;
        address?: string;
        port?: number;
        [x: string | symbol | number]: unknown;
    };
};
export interface ExceptionItem extends LogItem {
    message: string;
    stack: string;
}
export declare type streamInputData = Array<LogItem>;
export declare type SeverityLevelNames = keyof typeof Contracts.SeverityLevel;
/**
 * You should likely provide `applicationinsights.defaultClient` but are welcome to try passing in any type of TelemetryClient.
 */
export declare type activeAppInsightsClient = TelemetryClient;
/**
 * Call `applicationinsights.setup().start()`,
 * then you can return `applicationinsights.defaultClient` but are welcome to try passing in any type of TelemetryClient.
 */
export declare type getActiveAppInsightsClient = (
/** literally `require('applicationinsights')` */
require_applicationinsights: typeof applicationinsights_default_export) => activeAppInsightsClient;
//# sourceMappingURL=primitives.d.ts.map